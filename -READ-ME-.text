This program is a bridge between Chaosnet implementations. It supports
- Chaos-over-Ethernet (protocol nr 0x0804, cf
  https://www.iana.org/assignments/ieee-802-numbers/ieee-802-numbers.xhtml)
- Chaos-over-UDP (encapsulation used by the klh10/its pdp10 emulator,
  see https://its.victor.se/wiki/ch11)
- Chaos-over-Unix-sockets (used by the usim CADR emulator, see
  http://www.unlambda.com/cadr/) 

For the original Chaosnet report, MIT AI Memo 628 by David A. Moon,
see the attached PDF (original location
http://hdl.handle.net/1721.1/6353) or
https://lm-3.github.io/amber.html for an HTML:ized version.

It was written by Bj√∂rn Victor (bjorn@victor.se) in 2017, based on
earlier code (from 2005) for pairwise bridging (ether-chudp,
chudp-unix), where the Chaos-over-unix-sockets was based on code by
Brad Parker (brad@heeltoe.com, see http://www.unlambda.com/cadr/).

BPF support (for Ethernet on e.g. MacOS) is based on code by Daniel
Seagraves & Barry Silverman (see https://github.com/dseagrav/ld) and
by Ken Harrenstien (see https://github.com/PDP-10/klh10 or
http://klh10.trailing-edge.com/).

You can configure the bridge to connect subnets and/or individual hosts. 
Use cases could be
- connecting remote Chaosnet-over-Ethernets, e.g. to communicate with
  others using LambdaDelta (use a Chaos-over-UDP link between them).
- connecting remote Chaosnet-over-Unix-sockets, e.g. to communicate
  with others using usim (use a Chaos-over-UDP link between them).
- connecting ITSes running on klh10 - rather than configuring your
  klh10 to handle all other chudp hosts and iptables to forward chudp
  pkts over the tun interface, keep chudp routing in the bridge
  program. Adding new chudp hosts now doesn't require klh10
  configuration. 
- and interconnecting these three, of course!

When looking for a route, first a route for the individual host is
searched for, then the subnet. The bridge sends RUT routing packets
about subnets (but not about individual host routes, since that can't
be done with RUT).

When configured to use Ethernet, ARP for Chaosnet is used: 
- ARP packets are sent and received in a standard manner to find
  ethernet-chaos mappings
- Proxy ARP is used to inform the Ether hosts about non-Ethernet hosts
  (e.g chudp or unix-socket hosts)
- if compiled with PEEK_ARP=1, also peeks chaos/ethernet translations
  from received packets.

Currently only one Ethernet interface is supported.

When configured to use Chaos-over-UDP
- the "dynamic" keyword can be used to allow new hosts to be added to
  the configuration by simply sending a chudp packet to us.
  This feature is not as useful here as in klh10, since it's easy
  to configure new links and fast to restart the bridge, as opposed to
  a whole ITS system.
- host names given in chudp links (see below) are re-parsed every five
  minutes or so, to support dynamic DNS entries (hosts changing
  addresses). (Maybe this should be configurable.)

When configured to use Chaos-over-unix-sockets, you need to also run
the "chaosd" server (found with the usim CADR emulator, see
http://www.unlambda.com/cadr/). There can be only one such server per
host system (on the same host as the bridge).

When configuring your Chaosnets, you should really think about routing
and subnets properly. Trying to interconnect two "segments" of the
same subnet on different media is harder to get right than
interconnecting two different subnets. Attaching single hosts to a
subnet through this bridge is more doable.

The bridge responds to the DUMP-ROUTING-TABLE contact, which sends the
routing table (for subnets up to nr 122). This is used by e.g. the
functions CHAOS:SHOW-ROUTING-PATH and CHAOS:SHOW-ROUTING-TABLE on LMI
systems, the CHAOS:PRINT-ROUTING-TABLE function on Symbolics systems,
and if you're lucky, the DUMP-ROUTING-TABLE command of the CHATST
program in ITS. 

It also responds to TIME and UPTIME contacts. Note that UPTIME is wrt
the start of the bridge program, which is more interesting than the
host uptime (e.g. wrt the STATUS statistics).

A non-standard contact LASTCN is also supported, which reponds with
info about which hosts the bridge has received packets from, from what
other host (e.g. another router) and how long ago.

When cbridge is compiled to collect statistics, it also responds to
the STATUS protocol (see AI Memo 628), using the host name from the
"myname" configuration parameter (defaults to "real" host name up to
first period). Yes, it could try to look it up in Chaosnet DNS given
the chaddr parameter, but...

If the process receives a SIGUSR1 signal, it prints things about its
configuration, routing and statistics. If SIGINFO is defined (e.g. on
macOS, using ctrl-T in bash), that signal does the same.

----------------------------------------------------------------

Future work (let me know if you do it!):
========================================
- validate configuration (at least warn about crazy things)
- rewrite BPF part using libpcap
- minimize copying (not much of a problem?) - see comments in code
- implement Chaos-over-DTLS to have some security
- make Open Genera use tap instead of tun, to allow Chaosnet (quite
  different project, but for Chaos interoperability)
- add support for Chaos-over-IP (encapsulating using IP protocol 16,
  used by the pdp10x FPGA implementation). But the IP address mapping
  is crazy^W very limited, and if you just want encapsulation, use UDP?


----------------------------------------------------------------

Command line options:
=====================
 -d	turns on debug (lots of it)
 -v	turns on verbose (less detail)
 -c cf	reads config from file cf, default cbridge.conf

Configuration syntax:
; or # at start of line begin a comment

Global settings:
 chaddr %o
	set my default chaos address - must be set
 myname name 
	set my Chaosnet host name, max 32 bytes, for STATUS. 
	Defaults to "real" host name up to first period.
 chudp portnr [dynamic | static | ipv6 ]
	set my chudp portnr (default 42042). If "dynamic", add new
	chudp destinations dynamically when receiving pkts from
	unknown sources. 
	With ipv6 option, listens to both v4 and v6 (enabled also by
	defining a chudp link where the host has an ipv6 addr).
 ether ifname
       use this ether interface, default eth0

LINKDEF:
 link LINKTYPE subnet %o ROUTEARGS
    configures a subnet (one octal byte)
 link LINKTYPE host %o ROUTEARGS
    configures an individual host (octal 16-bit address)

ROUTEDEF:
 route host %o1 bridge %o2 ROUTEARGS
    configures a route to host %o1 through the host %o2
    (there had better be a way to reach %o2, though a route or link)
 route subnet %o1 bridge %o2 ROUTEARGS
    configures a route to subnet %o1 through the host %o2

ROUTEARGS (optional)::
 myaddr %o	defines the address of this bridge on this link (e.g.
		its address on that subnet)
 type t		sets the type of link: direct, bridge, fixed. 
 		Default type for "route" configs is fixed.
		Default cost for direct=direct, bridge=ether, fixed=ether
 cost c		sets the cost of the route: direct, ether, asynch.
		[should support actual numbers too?]

LINKTYPE:
 ether		this is a Chaos-over-Ethernet link. 
		Default type: direct, cost: direct.
 unix		this is a Chaos-over-unix-sockets link.
		Default type: direct, cost: direct.
 chudp host:port
		this is a Chaos-over-UDP link to host (ip or name) on
		port (default 42042). Default type: fixed, cost: asynch.


Note that while links implicitly define a route to the subnet/host,
you can only have a CHUDP link to a host, not directly to a subnet;
you need an additional route definition for the subnet.

A link definition is automatically created when using "dynamic" chudp
and a chudp pkt arrives from a new source.

A route definition (of type "bridge") is automatically created when a
RUT pkt is received, describing a new or better route to a subnet.


----------------------------------------------------------------

Examples:
=========

Assuming your local Chaosnet network is over Ethernet, and uses subnet 11 (octal).

    ; My default Chaosnet address
    chaddr 4401
    ; Define a chaos-over-udp link to the Global Chaosnet router, which has address 3040
    link chudp router.aosnet.ch host 3040
    ; Define a route to subnet 6 over that - it knows everyone
    route subnet 6 bridge 3040
    ; Define a local Chaos-over-Ether subnet nr 11 (hosts 4400-4777)
    link ether subnet 11
    ; A chaos-over-udp link to the ITS configured below
    link chudp localhost:42043 host 4411

For a ITS/klh10 running on the same host as cbridge, you can use
    devdef chaos ub3 ch11 addr=764140 br=5 vec=270 myaddr=4411 chudpport=42043 chip=4401/localhost:42042

If you let ITS/klh10 use Chaos-over-Ethernet, you do not need the last
"link chudp" line in the cbridge config, and in klh10.ini you can use
    devdef chaos ub3 ch11 addr=764140 br=5 vec=270 myaddr=4411 ifmeth=pcap

The ITS will pick up routing info from cbridge. (Of course you also
need to configure ITS to use address 4411.)


----------------------------------------------------------------

Notes:
======
For more info on the Global Chaosnet, see https://aosnet.ch.

Separate threads are started to handle input from different link
types. Each thread is only started if the configuration needs it (e.g.
if you configure an ether interface, or an ether link, the ethernet
thread is started).

Often the Ethernet link can NOT send and receive to the host system
running the bridge program, or other programs using the same
mechanism, such as LambdaDelta or klh10 using Chaos-over-Ether. 
Run the bridge on another system on your network.

Q: if UP should be the main router for subnet 6, but that's only
   point-2-point chudp links, how do we configure it to send RUTs for
   subnet 6 on other nets it may be connected to?
A: "route subnet 6 bridge 3143" works.
   Actual host routes have prio, this will add an indirect route,
   and no route will be found to self.

