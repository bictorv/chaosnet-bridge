This program is a bridge between Chaosnet implementations. It supports
- Chaos-over-Ethernet (protocol nr 0x0804, cf
  https://www.iana.org/assignments/ieee-802-numbers/ieee-802-numbers.xhtml)
- Chaos-over-UDP (encapsulation used by the klh10/its pdp10 emulator,
  see https://its.victor.se/wiki/ch11)
- Chaos-over-Unix-sockets (used by the usim CADR emulator, see
  http://www.unlambda.com/cadr/) 
- Chaos-over-TLS (see below)

For the original Chaosnet report, MIT AI Memo 628 by David A. Moon,
see the attached PDF (original location
http://hdl.handle.net/1721.1/6353) or
https://lm-3.github.io/amber.html for an HTML:ized version.

It was written by Bj√∂rn Victor (bjorn@victor.se) in 2017-2018, based on
earlier code (from 2005) for pairwise bridging (ether-chudp,
chudp-unix), where the Chaos-over-unix-sockets was based on code by
Brad Parker (brad@heeltoe.com, see http://www.unlambda.com/cadr/).

BPF support (for Ethernet on e.g. MacOS) is based on code by Daniel
Seagraves & Barry Silverman (see https://github.com/dseagrav/ld) and
by Ken Harrenstien (see https://github.com/PDP-10/klh10 or
http://klh10.trailing-edge.com/).

You can configure the bridge to connect subnets and/or individual hosts. 
Use cases could be
- connecting remote Chaosnet-over-Ethernets, e.g. to communicate with
  others using LambdaDelta (use a Chaos-over-UDP or -over-TLS
  link between them). 
- connecting remote Chaosnet-over-Unix-sockets, e.g. to communicate
  with others using usim (use a Chaos-over-UDP or -TLS link between them).
- connecting ITSes running on klh10 - rather than configuring your
  klh10 to handle all other chudp hosts and iptables to forward chudp
  pkts over the tun interface, keep routing in the bridge
  program. Adding new chudp hosts now doesn't require klh10
  configuration. 
- and interconnecting these three, of course!

When looking for a route, first a route for the individual host is
searched for, then the subnet. The bridge sends RUT routing packets
about subnets (but not about individual host routes, since that can't
be done with RUT).

When configured to use Ethernet, ARP for Chaosnet is used: 
- ARP packets are sent and received in a standard manner to find
  ethernet-chaos mappings
- Proxy ARP is used to inform the Ether hosts about non-Ethernet hosts
  (e.g chudp or unix-socket hosts)

Currently only one Ethernet interface is supported.

When configured to use Chaos-over-UDP
- the "dynamic" keyword can be used to allow new hosts to be added to
  the configuration by simply sending a chudp packet to us.
  This feature is not as useful here as in klh10, since it's easy
  to configure new links and fast to restart the bridge, as opposed to
  a whole ITS system.
- host names given in chudp links (see below) are re-parsed every five
  minutes or so, to support dynamic DNS entries (hosts changing
  addresses). (Maybe this should be configurable.)

When configured to use Chaos-over-unix-sockets, you need to also run
the "chaosd" server (found with the usim CADR emulator, see
http://www.unlambda.com/cadr/, or at https://github.com/LM-3/chaos).
There can be only one such server per host system (on the same host as
the bridge).

When configured to use Chaos-over-TLS, it needs some certificate
infrastructure. I'm working on one for the Global Chaosnet. There are
different reasons to want to use TLS:
- one is for improved security (confidentiality, authenticity), and
- another is for clients which don't have externally reachable and
  stable IP addresses and thus are not reachable by UDP. TCP would
  suffice, but since clients don't have stable IPs, it would be hard
  to firewall - instead you need an open server which is not so nice.
  TLS helps with authentication. 
TLS is asymmetric, in the sense that one end is the server which the
clients connect to. The implementation is not yet tested for cbridges
which have both roles, but might work. :-) 
(My preliminary impression is that it is faster than CHUDP!)
Needs libssl-dev to compile.

When configuring your Chaosnets, you should really think about routing
and subnets properly. Trying to interconnect two "segments" of the
same subnet on different media is harder to get right than
interconnecting two different subnets. Attaching single hosts to a
subnet through this bridge is more doable.

If the process receives a SIGUSR1 signal, it prints things about its
configuration, routing and statistics. If SIGINFO is defined (e.g. on
macOS, using ctrl-T in bash), that signal does the same.


Supported Chaosnet protocols
============================
The bridge responds to the DUMP-ROUTING-TABLE contact, which sends the
routing table (for subnets up to nr 122). This is used by e.g. the
functions CHAOS:SHOW-ROUTING-PATH and CHAOS:SHOW-ROUTING-TABLE on LMI
systems, the CHAOS:PRINT-ROUTING-TABLE function on Symbolics systems,
and if you're lucky, the DUMP-ROUTING-TABLE command of the CHATST
program in ITS. 

When cbridge is compiled to collect statistics, it also responds to
the STATUS protocol (see AI Memo 628), using the host name from the
"myname" configuration parameter (defaults to "real" host name up to
first period). Yes, it could try to look it up in Chaosnet DNS given
the chaddr parameter, but... [libresolv won't play nicely with Chaos.]

It also responds to TIME and UPTIME contacts. Note that UPTIME is wrt
the start of the bridge program, which is more interesting than the
host uptime (e.g. wrt the STATUS statistics).

A non-standard contact LASTCN is also supported, which reponds with
info about which hosts the bridge has received packets from, from what
other host (e.g. another router) and how long ago. Each entry consists of
word 0: length of entry in 16-bit words (7)
     1: host addr which was seen
     2: # input pkts from that (least significant 16 bits)
     3:   (most significant 16 bits)
     4: address the host was last seen from (e.g. a bridge)
     6: how many seconds ago was the host seen (LSB 16 bits)
     7:   (MSB 16 bits)

----------------------------------------------------------------

Future work (let me know if you do it!):
========================================
- validate configuration (at least warn about crazy things)
- rewrite BPF part using libpcap
- minimize copying (not much of a problem?) - see comments in code
- make Open Genera use tap instead of tun, to allow Chaosnet (quite
  different project, but for Chaos interoperability)
- add support for Chaos-over-IP (encapsulating using IP protocol 16,
  used by the pdp10x FPGA implementation). See also  "Cisco's
  implementation of Chaosnet", with the same type of mapping
  https://docstore.mik.ua/univercd/cc/td/doc/product/software/ssr83/rpc_r/48381.htm
  But the IP address mapping is crazy^W very limited, and if you just
  want encapsulation, use UDP?


----------------------------------------------------------------

Command line options:
=====================
 -d	turns on debug (lots of it)
 -v	turns on verbose (less detail)
 -t	turns on TLS debug (lots)
 -c cf	reads config from file cf, default cbridge.conf

Configuration syntax:
; or # at start of line begin a comment

Global settings:
 chaddr %o
	set my default chaos address - must be set
 myname name 
	set my Chaosnet host name, max 32 bytes, for STATUS. 
	Defaults to "real" host name up to first period.
 chudp portnr [dynamic | static | ipv6 ]
	set my chudp portnr (default 42042). If "dynamic", add new
	chudp destinations dynamically when receiving pkts from
	unknown sources. 
	With ipv6 option, listens to both v4 and v6 (enabled also by
	defining a chudp link where the host has an ipv6 addr).
 tls [ key keyfile ] [ cert certfile ] [ ca-chain ca-chain-cert-file ] [ myaddr %o ] [ server portnr ]
        set up for TLS using the private key in keyfile, the cert in
	certfile, and the CA trust chain in ca-chain-cert-file.

	If "server" is specified, a TLS server is started listening to
	portnr (default 42042, if at EOL). TLS servers are always
	"dynamic" in that they listen to connections from anywhere,
	but accept only those using certificates trusted by the CA
	trust chain. Server-end connections are added dynamically at
	runtime, and can not be pre-declared. The local address is set
	to the myaddr parameter, or the global chaddr.
 ether ifname
       use this ether interface, default eth0

LINKDEF:
 link LINKTYPE subnet %o ROUTEARGS
    configures a subnet (one octal byte)
 link LINKTYPE host %o ROUTEARGS
    configures an individual host (octal 16-bit address)

ROUTEDEF:
 route host %o1 bridge %o2 ROUTEARGS
    configures a route to host %o1 through the host %o2
    (there had better be a way to reach %o2, though a route or link)
 route subnet %o1 bridge %o2 ROUTEARGS
    configures a route to subnet %o1 through the host %o2

ROUTEARGS (optional)::
 myaddr %o	defines the address of this bridge on this link (e.g.
		its address on that subnet)
 type t		sets the type of link: direct, bridge, fixed. 
 		Default type for "route" configs is fixed.
		Default cost for direct=direct, bridge=ether, fixed=ether
 cost c		sets the cost of the route: direct, ether, asynch.
		[should support actual numbers too?]

LINKTYPE:
 ether		this is a Chaos-over-Ethernet link. 
		Default type: direct, cost: direct.
 unix		this is a Chaos-over-unix-sockets link.
		Default type: direct, cost: direct.
 chudp host:port
		this is a Chaos-over-UDP link to host (ip or name) on
		port (default 42042). Default type: fixed, cost: asynch.
 tls host:port  this is a Chaos-over-TLS link, client end, connecting
		to host (ip or name) at port (default 42042).
		Default type: fixed, cost: asynch.

Note that while links implicitly define a route to the subnet/host,
you can only have a CHUDP link to a host, not directly to a subnet;
you need an additional route definition for the subnet.
(See example below.)

A link definition is automatically created when using "dynamic" chudp
and a chudp pkt arrives from a new source.

A route definition (of type "bridge") is automatically created when a
RUT pkt is received, describing a new or better route to a subnet.


----------------------------------------------------------------

Examples:
=========

Assuming your local Chaosnet network is over Ethernet, and uses subnet 11 (octal).

    ; My default Chaosnet address
    chaddr 4401
    ; Define a chaos-over-udp link to the Global Chaosnet router, which has address 3040
    link chudp router.aosnet.ch host 3040
    ; Define a route to subnet 6 over that - it knows everyone
    ; This is not really needed, since 3040 will send routing info about this net
    route subnet 6 bridge 3040
    ; Define a local Chaos-over-Ether subnet nr 11 (hosts 4400-4777)
    link ether subnet 11
    ; A chaos-over-udp link to the ITS configured below
    link chudp localhost:42043 host 4411

For a ITS/klh10 running on the same host as cbridge, you can use
    devdef chaos ub3 ch11 addr=764140 br=5 vec=270 myaddr=4411 chudpport=42043 chip=4401/localhost:42042

If you let ITS/klh10 use Chaos-over-Ethernet, you do not need the last
"link chudp" line in the cbridge config, and in klh10.ini you can use
    devdef chaos ub3 ch11 addr=764140 br=5 vec=270 myaddr=4411 ifmeth=pcap

The ITS will pick up routing info from cbridge. (Of course you also
need to configure ITS to use address 4411.)


Example: MX-11
==============

A different example is the config for MX-11 (aka router.aosnet.ch).

The MX-11 serves as a hub for a number of hosts connecting through
CHUDP (mostly ITS systems, but also BSD and MINITS). They have
individual addresses on net 6. 

The name of MX-11 (used e.g. in STATUS replies):
    myname MX-11
The "main" Chaosnet address of MX-11 (on net 6) is
    chaddr 3040
and it listens to CHUDP on the standard port, also over IPv6
    chudp 42042 ipv6
It also acts as a TLS server for Chaos-over-TLS
    tls key private/router.aosnet.ch.key.pem cert certs/router.aosnet.ch.cert.pem ca-chain ca-chain.cert.pem ipv6 server
It uses the standard name for the ethernet interface
    ether eth0

The config for the CHUDP hosts consists of lines
    link chudp hostN host addrN
where hostN is the host name or IP of a host, and addrN is its
Chaosnet addess. 

Additionally, MX-11 connects to the local ethernet (where an old
Symbolics lisp machine might be running). NOTE the declaration of
"myaddr" for net 1, which means that packets cbridge sends on this net
are sent from address 440. A router/bridge should always have (and
use) an address specific to each net.
    link ether subnet 1 myaddr 440

To tell cbridge to send routing info about net 6, which only has
individual host links, a route declaration is necessary.
    route subnet 6 bridge 3040

----------------------------------------------------------------

Notes:
======
For more info on the Global Chaosnet, see https://aosnet.ch.

Separate threads are started to handle input from different link types
(several for TLS). Each thread is only started if the configuration
needs it (e.g. if you configure an ether interface, or an ether link,
the ethernet thread is started).

Often the Ethernet link can NOT send and receive to the host system
running the bridge program, or other programs using the same
mechanism, such as LambdaDelta or klh10 using Chaos-over-Ether. 
Run the bridge on another system on your network.
