# See https://wiki.nftables.org/wiki-nftables/index.php/Simple_ruleset_for_a_home_router
# Notes:
# vmaps can't match against sets (e.g. th port {udp,tcp})
# iifname can't match wildcards (e.g. "tap*")
# you need root to even run nft --check (otherwise segfault!)

# See https://wiki.nftables.org/wiki-nftables/index.php/Conntrack_helpers
# for the ftp conntrack stuff

# See end of https://wiki.nftables.org/wiki-nftables/index.php/Atomic_rule_replacement
# flush ruleset
add table ip klh10
delete table ip klh10

# Parameters (static for now, instead of from klh10.ini)
# tap interfaces for emulators (used by TOPS-20)
define DEV_EMULATOR_TAP = {tap0,tap1}
# tun interfaces (used by ITS)
define DEV_EMULATOR_TUN = {tun0,tun1}
define DEV_EMULATOR = {tap0,tap1,tun0,tun1}
# The real interface of this host
define DEV_HOST = eth0
# Host external (non-tun/tap) address, on DEV_HOST
define NET_HOST = 10.0.1.76
# All on different subnets of DEV_EMULATOR
define NET_EMULATOR = 192.168.0.0/16
# Individual addrs, for DNAT
define TINA_IPADDR = 192.168.65.20
define BV20_IPADDR = 192.168.60.20
define UP_IPADDR = 192.168.20.20
define BV_IPADDR = 192.168.21.20

# Where to forward outgoing DNS traffic
#define DNS_SERVER = 10.1.1.72
define DNS_SERVER = 10.0.1.2
define CHAOS_DNS_SERVER = 10.1.1.72
# Server for in/out mail
define SMTP_SERVER = 10.1.1.72
# Proxy where http may come from
define HTTP_PROXY = 10.1.1.72

# Local networks
define LOCAL_NETS = 10.0.0.0/16
# Where Chaos-over-IP is OK - only local anyway
define CHIP_HOSTS = { 10.1.1.72, 10.0.1.0/24 }
# Where Chaos-over-UDP is OK
define CHUDP_HOSTS = { 10.1.1.72 }


table ip klh10 {
  # named vmaps for things to be accepted (from world, from local, outbound, outbound only-to-X)
  # see https://wiki.nftables.org/wiki-nftables/index.php/Concatenations#Named_verdict_maps
  # T20 can take Telnet, but ITS not, so differentiate
  map inbound_emulator_map {
      # Traffic coming from the emulators
      # Allow FTP and FTP-data (outgoing from emulators)
      type inet_proto . inet_service : verdict;
      elements = { udp . 53 : accept, tcp . 53 : accept, 
	   	      	       	      tcp . 79 : accept,
				      tcp . 21 : accept, tcp . 20 : accept,
	   	      	       	      udp . 42042 : accept, tcp . 42042 : accept}
  }
  # Traffic bound for TOPS-20 (tap)
  map inbound_t20_world_map {
      type inet_service : verdict;
      # Accept Finger, Supdup, Telnet
      elements = { 79 : accept, 95 : accept, 23 : accept }
      }
  # Traffic bound for ITS (tun)
  map inbound_its_world_map {
      type inet_service : verdict;
      # Accept Finger, Supdup
      elements = { 79 : accept, 95 : accept, 80 : accept }
      }
  map inbound_restricted_dest_map {
      # inbound from certain IP addresses to dest ports - these are on LOCAL_NETS so this is not really needed
      type ipv4_addr . inet_proto . inet_service : verdict
      elements = {
      	       $DNS_SERVER . udp . 53 : accept,
      	       $DNS_SERVER . tcp . 53 : accept,
	       $CHAOS_DNS_SERVER . udp . 53 : accept,
  	       $SMTP_SERVER . tcp . 25 : accept,
  	       $HTTP_PROXY . tcp . 80 : accept
  	       }
      }
  # Allow only this outgoing traffic to the world
  # Consider Telnet?
  map outbound_world_map {
      type inet_service: verdict;
      elements = { 79 : accept, 95 : accept, 23 : accept, 20 : accept, 21 : accept }
       }
  # in addition to the above, allow to certain IP addresses
  map outbound_restricted_map {
      type ipv4_addr . inet_proto . inet_service : verdict;
      # typeof ip daddr . ip protocol . th dport
      elements = {
      	       $DNS_SERVER . udp . 53 : accept,
	       $CHAOS_DNS_SERVER . udp . 53 : accept,
  	       $SMTP_SERVER . tcp . 25 : accept
  	       }
      }

    # 1. ct helper stateful object
    #   "ftp-standard" is the name of this ct helper stateful object.
    #   "ftp" is the in-kernel name of the ct helper for ftp.
    ct helper ftp-standard {
        type "ftp" protocol tcp;
    }

    chain inbound_from_world {
	# Accept Chaos-in-IP from certain hosts
	ip protocol 16 ip saddr $CHIP_HOSTS accept

	# Check the vmaps
        iifname $DEV_EMULATOR_TUN tcp dport vmap @inbound_its_world_map
        iifname $DEV_EMULATOR_TAP meta nftrace set 0 tcp dport vmap @inbound_t20_world_map
    }

    chain inbound_from_emulator {
        # accepting ping (icmp-echo-request) for diagnostic purposes.
        icmp type echo-request limit rate 5/second accept

	# Accept Chaos-in-IP from emulator net
	ip protocol 16 accept
        # allow some ports from the emulator network
        meta nftrace set 1 ip protocol . th dport vmap @inbound_emulator_map
    }

    chain inbound {
        type filter hook input priority 0; policy drop;

        # Allow traffic from established and related packets, drop invalid
        ct state vmap { established : accept, related : accept, invalid : drop }

	ip saddr vmap { $LOCAL_NETS : accept }
	# Accept Chaos-over-UDP from certain hosts
	iifname $DEV_HOST ip saddr $CHUDP_HOSTS udp dport 42042 meta nftrace set 0 accept

        # allow loopback traffic, anything else jump to chain for further evaluation
        iifname vmap { "lo" : accept, $DEV_HOST : jump inbound_from_world,
		      tap0: jump inbound_from_emulator, tap1: jump inbound_from_emulator,
		      tun0: jump inbound_from_emulator, tun1: jump inbound_from_emulator 
		      }

        # 3a. Rule for ftp control channel.
        #     NOTE conntrack works here without needing helper.
        tcp dport 21 ct state new,established meta nftrace set 1 accept

        # 3b. Rule for related packets on ftp data channel.
        #     NOTE in-kernel ct helper name "ftp" is used here;
        #          trying to use ct helper stateful object name "ftp-standard" will NOT work.
        ct helper "ftp" meta nftrace set 1 accept 

        # the rest is dropped by the above policy
	
    }

    chain forward {
        type filter hook forward priority -1; policy drop;

        # Allow traffic from established and related packets, drop invalid
	# iifname $DEV_HOST tcp sport 53 meta nftrace set 0 ct state vmap { established : accept, related : accept, invalid : drop }
        ct state vmap { established : accept, related : accept, invalid : drop }

	# Allow emulator-to-emulator traffic
	ip saddr $NET_EMULATOR ip daddr $NET_EMULATOR meta nftrace set 0 accept

	# Let outgoing Chaos-over-IP pass to some places
	ip protocol 16 ip daddr $CHIP_HOSTS meta nftrace set 1 accept

	# Accept Chaos-over-UDP from certain hosts
	iifname $DEV_HOST ip saddr $CHUDP_HOSTS udp dport 42042 meta nftrace set 1 accept

	# From emulators, check outgoing for world and restrictions 
	iifname $DEV_EMULATOR meta nftrace set 0 tcp dport vmap @outbound_world_map
	iifname $DEV_EMULATOR meta nftrace set 0 ip daddr . ip protocol . th dport vmap @outbound_restricted_map

        iifname $DEV_HOST oifname $DEV_EMULATOR_TUN tcp dport vmap @inbound_its_world_map
	# Accept Telnet from local net to ITS
        ip saddr $LOCAL_NETS oifname $DEV_EMULATOR_TUN tcp dport 23 accept
        iifname $DEV_HOST oifname $DEV_EMULATOR_TAP meta nftrace set 0 tcp dport vmap @inbound_t20_world_map

	# From local network, not handled by NAT 
	iifname $DEV_HOST ip saddr . ip protocol . th dport vmap @inbound_restricted_dest_map meta nftrace set 1
	# iifname $DEV_HOST ip saddr . ip protocol . th sport vmap @inbound_restricted_source_map  meta nftrace set 0

	# Accept things not having to do with the emulators (e.g. docker)
	iifname != $DEV_EMULATOR meta nftrace set 0 accept

        # 2. Rule for initial ftp connection (control channel), specifying ct helper stateful object to use.
        #    NOTE "ftp-standard" is the name of the ct helper stateful object.
        tcp dport 21 ct helper set "ftp-standard"

        # the rest is dropped by the above policy
    }

    chain prerouting {
        type nat hook prerouting priority -100;	policy accept;

	# send outgoing traffic to port 53 to local DNS server
	# (This only works with a patched resolv.exe, which reinitializes its UDP socket for each query.
	# Otherwise, the same port is used, and the same NAT table entry is reused without checking
	# with the queue.)
	# First check with the queue
	# @@@@ note: this will simply accept if the queue program isn't there. Or drop, if you omit "bypass".
	iifname $DEV_EMULATOR ip protocol {udp,tcp} th dport 53 meta mark 0 meta nftrace set 0 queue num 53 bypass
	# When it gets back, check if it was marked as Chaosnet 
	udp dport 53 meta mark 53053 meta nftrace set 0 dnat to $CHAOS_DNS_SERVER
	# Else pass it to default DNS server
	iifname $DEV_EMULATOR ip protocol {udp,tcp} th dport 53 meta mark != 53053 meta nftrace set 0 dnat to $DNS_SERVER

        # 2. Rule for initial ftp connection (control channel), specifying ct helper stateful object to use.
        #    NOTE "ftp-standard" is the name of the ct helper stateful object.
        tcp dport 21 ct helper set "ftp-standard"

	# handle incoming traffic on ports, passing on to different emulators (dnat too)
	# cf https://wiki.nftables.org/wiki-nftables/index.php/Concatenations

	# For external conns, limit rate of new ones, and log them
	ip daddr $NET_HOST ip saddr != $LOCAL_NETS ct state new tcp dport {23,95,80} limit rate 5/second counter meta nftrace set 1 log prefix "New conn: " dnat to ip protocol . th dport map { tcp . 23 : $TINA_IPADDR, tcp . 95 : $UP_IPADDR, tcp . 80 : $UP_IPADDR }
	# What wasn't caught above (local and non-new)
	ip daddr $NET_HOST meta nftrace set 1 dnat to ip protocol . th dport map { tcp . 23 : $TINA_IPADDR, tcp . 95 : $UP_IPADDR, tcp . 80 : $UP_IPADDR }
	# It would be better if a map could also provide the port, but that doesn't seem to work
	# So add special cases below.
	# Note: to telnet to explicit port with standard options negotiation, use "telnet -- host -port" (negative port)
	ip daddr $NET_HOST meta nftrace set 0 tcp dport 60023 dnat to $BV20_IPADDR:23
	ip daddr $NET_HOST meta nftrace set 0 tcp dport 60095 dnat to $BV20_IPADDR:95
	ip daddr $NET_HOST meta nftrace set 0 tcp dport 20023 dnat to $UP_IPADDR:23
	ip daddr $NET_HOST meta nftrace set 0 tcp dport 20095 dnat to $UP_IPADDR:95
	ip daddr $NET_HOST meta nftrace set 0 tcp dport 21023 dnat to $BV_IPADDR:23
	ip daddr $NET_HOST meta nftrace set 0 tcp dport 21095 dnat to $BV_IPADDR:95

    }
    chain postrouting {
        type nat hook postrouting priority 100; policy accept;

        # masquerade private IP addresses coming from emulator net
	iifname $DEV_EMULATOR oifname $DEV_HOST meta nftrace set 0 masquerade
    }
}
